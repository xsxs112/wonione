<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace="cafe24.wio.mapper.MemberMapper">

	<!-- 4-1. 구성원 정보 수정 시, 은행 코드 대신 은행명으로 업데이트 하도록 처리 -->
	<select id="getPmResourceList" resultType="hashMap">
		SELECT 
			 pm_r_code 	AS pmResourceCode
			,pm_r_title AS pmResourceTitle
		FROM 
			wt_payment_resource
	
	</select>

	<!-- 4. 구성원 정보 수정 -->
	<update id="modifyWIOMember" parameterType="Member">
		UPDATE wt_member_registration
		SET
				mr_pw			=		#{mrPw}
			,	mr_phone		=		#{mrPhone}
			,	mr_addr			=		#{mrAddr}
			,	pm_r_code		= 		#{pmRCode}
			,	mr_account_num	=		#{mrAccountNum}
			,	shuttle_num		=		#{shuttleNum} <!-- 화면 만들고 권한 관리자,일반 직원만 수정 가능하도록 해보쟈.0928 10:25 -->
		WHERE 
				mr_id= #{mrId}
	</update>

	<!--  3. 구성원 등록, 수납 처리 전 -->
	<insert id="addWIOMember" parameterType="Member">
		INSERT 
		INTO 
			wt_member_registration(
				mr_id			
			, 	mr_pw				
			, 	mr_name			
			, 	level_num		
			, 	mr_phone		
			, 	mr_addr			
			, 	mr_target_score		
			, 	pm_r_code			
			,	mr_account_num	
			, 	shuttle_num			
			, 	mr_join_date		
			, 	mr_reg_date		
		) VALUES (
				#{mrId}
			, 	#{mrPw}
			, 	#{mrName}
			, 	${levelNum}
			, 	#{mrPhone}
			, 	#{mrAddr}
			, 	${mrTargetScore}
			, 	#{pmRCode}
			, 	#{mrAccountNum}
			, 	#{shuttleNum}
			, 	#{mrJoinDate}
			, 	NOW());
	</insert>

	<!-- 2. 로그인 -->
	<select id="login" resultType="Member" parameterType="String">
		SELECT
				mr_id				AS mrId
			, 	mr_pw				AS mrPw
			, 	mr_name				AS mrName
			, 	level_num			AS levelNum
			, 	mr_phone			AS mrPhone
			, 	mr_addr				AS mrAddr
			, 	mr_join_date		AS mrJoinDate
			, 	mr_reg_date 		AS mrRegDate

		FROM
			wt_member_registration AS m
		WHERE
			m.mr_id = #{mrId}
		AND
			m.mr_pw = #{mrPw};
	</select>
	
	<!-- 1-3. 아이디 중복 검사 / 로그인 처리시 사용 -->
	<select id="WIOMemberIdCheck" parameterType="String" resultType="String">
		SELECT
				m.mr_id
			,	m.mr_pw
			,	m.mr_name
		FROM 
			wt_member_registration AS m
		WHERE
			m.mr_id = #{mrId}
		AND
			m.mr_pw = #{mrPw};
	</select>
	

	<!-- 1-2. 구성원 정보 보기 -->
	<select id="getMemberInfo" resultType="Member" parameterType="String">
<!-- 	
		SELECT
				mr_id 					AS mrId
			,	mr_pw 					AS mrPw
			,	mr_name					AS mrName
			,	mr_phone				AS mrPhone
			,	mr_addr 				AS mrAddr
			,	mr_target_score	 		AS mrTargetScore
			,	pm_r_code 				AS pmRCode
			,	mr_account_num	 		AS mrAccountNum
			, 	mr_join_date 			AS mrJoinDate
			, 	mr_reg_date 			AS mrRegDate
		FROM
			wt_member_registration 	AS m
		WHERE
			m.mr_id = #{mrId}
 -->
 
	 	SELECT
				m.mr_id				AS mrId
			,	m.mr_pw				AS mrPw
			,	m.mr_name			AS mrName
			,	m.level_num			AS levelNum
			,	m.mr_phone			AS mrPhone
			,	m.mr_addr			AS mrAddr
			,	m.mr_target_score	AS mrTargetScore
			,	m.pm_r_code			AS pmRCode
			,	m.mr_account_num	AS mrAccountNum
			,	m.shuttle_num		AS shuttleNum
			,	m.mr_join_date		AS mrJoinDate
			,	m.mr_reg_date		AS mrRegDate
			,	pr.pm_r_title		AS pmRTitle
	
		FROM
			wt_member_registration AS m
		LEFT JOIN
			wt_payment_resource AS pr
		ON
			m.pm_r_code = pr.pm_r_code
		WHERE
			m.mr_id = #{mrId};
 	
	</select>
	
	<!-- 1-2. 구성원 추가 정보 입력 시, select 태그 열고 쿼리를 하나 더 작성 -->
	

	<!-- 1. 구성원 리스트 가져오기 -->
	<select id="getWIOMemberList" resultType="Member">
		SELECT 
				mr_id				AS mrId
			, 	mr_pw				AS mrPw
			, 	mr_name				AS mrName
			, 	level_num			AS levelNum
			, 	mr_phone			AS mrPhone
			, 	mr_addr				AS mrAddr
			, 	mr_target_score		AS mrTargetScore
			, 	pm_r_code			AS pmRCode
			, 	mr_account_num		AS mrAccountNum
			, 	shuttle_num			AS shuttleNum
			,	mr_join_date		AS mrJoinDate
			, 	mr_reg_date			AS mrRegDate
		FROM 
			wt_member_registration;
	</select>



</mapper>