<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
	<mapper namespace="cafe24.wio.mapper.ApprMapper">
	
	
	<select id = "getModifyRequest" parameterType="string" resultType="string">

		SELECT modify_request as modifyRequest
		FROM wt_attendance_management
		WHERE attendance_code = #{attCode};
	
	</select>
	
	
	
	<delete id="deleteAttendance" parameterType="string">
	
		DELETE FROM wt_attendance_management WHERE attendance_code=#{attCode};
	
	</delete>
	
	
	<update id = "attendanceModify" parameterType="AttManagement">
		UPDATE wt_attendance_management
		SET
			attendance_start_time=#{attStTime},
			attendance_end_time=#{attEndTime},
			attendance_time=#{attTime},
			attendance_note=#{attNote},
			going_out_time=#{goingOut},
			going_out_stTime=#{goingOutStTime},
			going_out_endTime=#{goingOutEndTime},
			work_overtime=#{workOvertime},
			real_meal_time=#{realMealTime},
			confirm = '수정 완료'
		WHERE 
			attendance_code = #{attCode};
	</update>
	
	
	<update id = "attendanceModifyRequest" parameterType="AttManagement">
		UPDATE wt_attendance_management
			SET
				confirm='수정 요청',
				modify_request=#{reReason}
			WHERE 
				attendance_code = #{attCode};
	</update>
	
	
	
	<select id = "getAttManagemetDetail" parameterType="string" resultType="AttManagement">

		SELECT attendance_code AS attCode
				, a.mr_id AS mrId
				, l.level_name AS levelName
				, m.mr_name AS mrName
				, attendance_date AS attDate
				, attendance_start_time AS attStTime
				, attendance_end_time AS attEndTime
				, attendance_time as attTime
				, attendance_note AS attNote
				, going_out_time AS goingOut
				, going_out_stTime AS goingOutStTime
				, going_out_endTime AS goingOutEndTime
				, confirm AS confirm
				, work_overtime AS workOvertime
				, real_meal_time AS realMealTime
				, modify_request AS modifyRequest
			FROM wt_attendance_management AS a 
					LEFT JOIN wt_member_registration AS m
					ON a.mr_id = m.mr_id
					LEFT JOIN wt_level AS l
					ON m.level_num = l.level_num
		WHERE attendance_code = #{attCode};
		
	</select>
	
	
	
	<!-- 점심시간보다 늦게  출근 한 경우 1을 리턴 -->
	<select id = "notMealTime" parameterType="string" resultType="int">

		SELECT (m.attendance_start_time<![CDATA[ > ]]> t.meal_start_time)
		FROM wt_attendance_management AS m
				LEFT JOIN wt_attendance_time_manage AS t
				ON m.mr_id = t.mr_id
		WHERE m.attendance_code = #{attCode};
	
	</select>
	
	
	<!-- 조퇴했을 때 1 리턴 -->
	<select id = "earlyLeave" parameterType="string" resultType="int">

		SELECT IFNULL((m.attendance_end_time <![CDATA[ < ]]> t.att_end_time),0)
		FROM wt_attendance_management AS m 
				left join wt_attendance_time_manage AS t
				ON m.mr_id = t.mr_id
		WHERE m.attendance_code = #{attCode};
	
	</select>
	
	<!-- 지각했을 때 1 리턴 -->
	<select id = "late" parameterType="string" resultType="int">

		SELECT (m.attendance_start_time <![CDATA[ > ]]> t.att_start_time)
		FROM wt_attendance_management AS m 
			left join wt_attendance_time_manage AS t
			ON m.mr_id = t.mr_id
		WHERE m.attendance_code = #{attCode};
	
	</select>
	
	
	<select id = "MealTime" parameterType="string" resultType="float">

		SELECT meal_time
		FROM wt_attendance_time_manage
		WHERE mr_id = #{SID};
	
	</select>
	
	
	<select id = "GoingOutTime" parameterType="string" resultType="float">

		SELECT going_out_time
		FROM wt_attendance_management
		WHERE attendance_code = #{attCode};
	
	</select>
	
	
	
	
	<!-- 출퇴근 관리 리스트에서 근무시간 가져오기 -->
	<select id = "ListWorkTime" parameterType="string" resultType="string">

		SELECT work_time
		FROM wt_attendance_time_manage AS m
		WHERE m.mr_id = #{SID};
	
	</select>
	
	
	<!-- 출퇴근 관리 리스트에서 근무시간 가져오기 -->
	<select id = "getWorkTime" parameterType="string" resultType="float">

		SELECT (TIMESTAMPDIFF(minute, #{workStTime}, #{workEndTime})/60) AS work_time
	
	</select>
	
	<!-- 식사시간 가져오기 -->
	<select id = "getMealTime" parameterType="string" resultType="float">

		SELECT (TIMESTAMPDIFF(minute, #{mStTime}, #{mEndTime})/60) AS mealTime

	
	</select>
	
	
	
	<!-- 출근 리스트에서 일한시간 업데이트 -->
	<update id = "setWorkEndTime" parameterType="String">
		UPDATE wt_attendance_management
		SET
			attendance_end_time=NOW()
			
			
		WHERE	
			attendance_code = #{attCode};

	</update>
	
	
	
	<!-- 출근 리스트에서 일한시간 업데이트 -->
	<update id = "setWorkTime" parameterType="AttManagement">
		UPDATE wt_attendance_management
		SET
			attendance_end_time=NOW(),
			attendance_time=#{attTime},
			work_overtime=#{workOvertime},
			real_meal_time = #{realMealTime},
			attendance_note=#{attNote}
			
		WHERE	
			attendance_code = #{attCode};

	</update>
	
	<!-- 퇴근시간 - 출근시간 구하기 -->
	<select id = "getAttEndTime" parameterType="string" resultType="float">
	
		SELECT (TIMESTAMPDIFF(minute, attendance_start_time, attendance_end_time)/60) AS attendance_time
		FROM wt_attendance_management
		WHERE attendance_code= #{attCode}
	
	</select>
	
	<!-- 외출시간 업데이트 -->
	<update id = "setGoingOut" parameterType="AttManagement">
		UPDATE wt_attendance_management
		SET		going_out_time=#{goingOut}
		WHERE	attendance_code = #{attCode};
	</update>
	
	
	
	<!-- 출근 확인 리스트 -->
	<select id = "confirmList" parameterType="string" resultType="AttManagement">
	
		SELECT attendance_code as attCode
				, m.mr_id as mrId 
				, m.mr_name AS mrName
				, l.level_name AS levelName
				, attendance_date as attDate
				, attendance_start_time as attStTime
				, attendance_end_time as attEndTime
				, attendance_time as attTime
				, attendance_note as attNote
				, going_out_time as goingOut
				, going_out_stTime as goingOutStTime
				, going_out_endTime as goingOutEndTime
		FROM wt_attendance_management AS a
				LEFT JOIN wt_member_registration AS m
				ON a.mr_id = m.mr_id
				LEFT JOIN wt_level AS l
				on m.level_num = l.level_num
		WHERE  (confirm = '확인' OR confirm = '수정 완료' )AND l.level_num<![CDATA[ < ]]>4
	
	</select>
	
	<!-- 출근 확인 업데이트 -->
	<update id = "manageConfirm" parameterType="String">
		UPDATE wt_attendance_management
	SET
		confirm='확인'
	WHERE 
		attendance_code = #{attCode};
	</update>
	
	
	<!-- 출근 확인 전 리스트 -->
	<select id = "noConfirmList" parameterType="string" resultType="AttManagement">
	
		SELECT attendance_code as attCode
				, m.mr_id as mrId 
				, m.mr_name AS mrName
				, l.level_name AS levelName
				, attendance_date as attDate
				, attendance_start_time as attStTime
				, attendance_end_time as attEndTime
				, attendance_time as attTime
				, attendance_note as attNote
				, going_out_time as goingOut
				, going_out_stTime as goingOutStTime
				, going_out_endTime as goingOutEndTime
				, confirm AS confirm
				, real_meal_time AS realMealTime
		FROM wt_attendance_management AS a
				LEFT JOIN wt_member_registration AS m
				ON a.mr_id = m.mr_id
				LEFT JOIN wt_level AS l
				on m.level_num = l.level_num
		WHERE  (confirm != '확인'AND confirm != '수정 완료')OR ISNULL(confirm) AND l.level_num <![CDATA[ < ]]>4
		ORDER BY attendance_date DESC;

	
	</select>
	
	
	
	<!-- 출퇴근 시간관리 삭제 -->
	<delete id="workTimeDelete" parameterType="string">
	
		DELETE FROM wt_attendance_time_manage WHERE mr_id=#{mrId}
	
	</delete>
	
	<!-- 출퇴근시간관리 상세보기 -->
	<update id = "workTimeModify" parameterType="AttManagement">
		UPDATE wt_attendance_time_manage
		SET
			att_start_time = #{workStTime},
			att_end_time = #{workEndTime},
			meal_start_time = #{mStTime},
			meal_end_time = #{mEndTime},
			work_time = #{workTime},
			meal_time = ${mealTime}
		WHERE mr_id = #{mrId}
	</update>
	
	
	<!-- 출퇴근 시간관리 저장 -->
	<insert id="addWorkTime" parameterType="AttManagement">
		INSERT INTO wt_attendance_time_manage
			(att_time_code, mr_id, att_start_time, att_end_time, meal_start_time, meal_end_time, work_time ,meal_time)
			VALUES (#{attTimeCode}, #{mrId}, #{workStTime}, #{workEndTime}, #{mStTime}, #{mEndTime}, #{workTime} ,#{mealTime})
	</insert>
	
	<!-- 출퇴근 시간 관리 리스트 코드 증가 검색 -->
	<select id="getTimeCode" resultType="hashMap">
	
		SELECT IFNULL((SELECT max(CAST(SUBSTRING(att_time_code,10) AS DECIMAL))+1 FROM wt_attendance_time_manage),1) AS max;	
	
	</select>

	
	<select id="checkWorkTimeList" resultType="int">
		
		SELECT  COUNT(a.mr_id)
		FROM wt_attendance_time_manage AS a
		WHERE a.mr_id = #{mrId}


	</select>
	
	
	<!-- 출퇴근 상세보기가 없을 때 -->
	<select id="nullList" resultType="AttTimeManage">
		
			SELECT m.mr_id AS mrId
					, m.mr_name AS mrName
					, l.level_name AS levelName
			from wt_member_registration AS m
					LEFT JOIN wt_level AS l
					ON m.level_num = l.level_num
			WHERE m.mr_id = #{mrId}

	</select>
	
	<!-- 출퇴근 상세보기 -->
	<select id="workerListDetail" resultType="AttTimeManage">
		
			SELECT att_time_code AS timeCode
					, m.mr_id AS mrID
					, m.mr_name AS mrName
					, l.level_name AS levelName
					, att_start_time AS workStTime
					, att_end_time AS workEndTime
					, meal_start_time AS mStTime
					, meal_end_time AS mEndTime
					, work_time AS workTime
			FROM wt_attendance_time_manage AS a
					LEFT JOIN 
					wt_member_registration AS m
					ON a.mr_id = m.mr_id
					LEFT JOIN wt_level AS l
					ON m.level_num = l.level_num

			WHERE a.mr_id = #{mrId}

	</select>
	
	<!-- 출퇴근 직원 리스트 -->
	<select id="getWorkerList" resultType="Member">
		
		SELECT m.mr_id as mrId, m.mr_name as mrName, l.level_name as levelName
		FROM wt_member_registration AS m
			LEFT JOIN wt_level AS l
			ON m.level_num = l.level_num 
		WHERE m.level_num <![CDATA[ < ]]> 4
		ORDER BY l.level_num ASC;

	</select>
	
	
	<select id="getTimeManageList" resultType="AttTimeManage">
		
		SELECT att_time_code as attTimeCode
				, m.mr_name as mrId
				, att_start_time as attStTime
				, att_end_time as attEndTime
				, meal_start_time as mealStTime
				, meal_end_time as mealEndTime
		FROM wt_attendance_time_manage AS a LEFT join
				wt_member_registration AS m
				ON a.mr_id = m.mr_id

	</select>
	
	
	
	
	
	
	<update id = "goingOutEnd" parameterType="string">
		UPDATE wt_attendance_management
		SET
			going_out_endTime=NOW()
		WHERE 
			attendance_code = #{attCode};
	</update>
	
	
	
	<update id = "workAttendanceEnd" parameterType="int">
	
		UPDATE wt_attendance_management
		SET
			attendance_end_time=NOW(),
			attendance_note='조퇴'
		WHERE 
		TIME(NOW())<![CDATA[ < ]]>'18:00:00' AND attendance_code = #{attCode};
	
	</update>
	
	
	
	<select id="dateCheck" parameterType="string" resultType = "int">
	
		select COUNT(*) 
		FROM wt_attendance_management AS m
		WHERE 
			DATE_FORMAT(NOW(),'%Y-%m-%d') = m.attendance_date AND m.mr_id = #{SID};
		
	</select>

	
	
	<update id = "goingStOut" parameterType="string">
		UPDATE wt_attendance_management
		SET
			going_out_stTime=NOW()
		WHERE 
			attendance_code = #{attCode};
	</update>
	
	
	
	<select id="getAttCode" parameterType="string" resultType = "string">
	
		SELECT attendance_code
		FROM wt_attendance_management AS a
		WHERE attendance_date = LEFT(NOW(),10) AND a.mr_id = #{SID}
		
	</select>
	
	
	
	
	<!-- 출근 insert -->
	<insert id="addAttendance" parameterType="AttManagement">
	
		INSERT INTO wt_attendance_management
					(attendance_code, mr_id, attendance_date, attendance_start_time, attendance_end_time, attendance_time, attendance_note, going_out_time, going_out_stTime, going_out_endTime)
			VALUES (#{attCode}, #{mrId}, LEFT(NOW(),10), right(NOW(),8), null, 0, '', 0, null, null)
		
	</insert>



	<select id = "getAttMaxCode" resultType="hashMap">
		SELECT IFNULL((SELECT max(CAST(substring(attendance_code,12) AS DECIMAL))+1 FROM wt_attendance_management),1) AS max;
	</select>	
	
	
	<!-- 외출 시간 구하기 -->
	<select id = "getGoingOutTime" parameterType="string" resultType="float">
	
		SELECT (TIMESTAMPDIFF(minute, going_out_stTime, going_out_endTime)/60) AS goingOutTime
		FROM wt_attendance_management
		WHERE attendance_code= #{attCode}
	
	</select>

	
	<select id = "getAttendanceList" parameterType="string" resultType="AttManagement">
	
	SELECT attendance_code as attCode
				, mr_id as mrId 
				, attendance_date as attDate
				, attendance_start_time as attStTime
				, attendance_end_time as attEndTime
				, attendance_time as attTime
				, attendance_note as attNote
				, going_out_time as goingOut
				, going_out_stTime as goingOutStTime
				, going_out_endTime as goingOutEndTime
				, confirm as confirm
				, work_overtime AS workOvertime
				, real_meal_time AS realMealTime
				
		FROM wt_attendance_management AS a
		WHERE a.mr_id = #{SID}
		ORDER BY a.attendance_date desc;
	
	</select>
	
	
	
	<!-- 핸드폰번호 가져오는거 -->
	<select id = "getMemberPhone" parameterType="string" resultType="string">
		SELECT m.mr_phone
		FROM wt_member_registration AS m
		WHERE m.mr_id = #{oid001};
	</select>
	
	
	
	<!-- 현재날짜 구하기 -->
	<select id = "getNow" resultType = "string">
		SELECT NOW();
	</select>
	
	
	<!-- 휴가 상세보기 -->
	<select id="getHolidayDetail" parameterType="string" resultType="ApprovalRequest">
		SELECT 	request_code as reCode
				, request_date as reDate
				, r.mr_name as mrName
				, left(request_start_date,10) as reStartDate
				, left(request_end_date,10) as reEndDate
				, request_reason as reReason
				, sortation as sortation
				, request_supervisor as reSupervisor 
				, request_processing_date as reProcessingDate
				, request_state as reState
				, refuse_reason as refuseReason
		FROM wt_approval_request AS a 
			LEFT JOIN wt_member_registration AS r
			ON a.mr_id = r.mr_id
		WHERE request_code = #{reCode};

	</select>


	<!-- 휴가 리스트 삭제 -->
	<delete id = "reDelete" parameterType="string">
		DELETE 
		FROM wt_approval_request 
		WHERE request_code= #{reCode};
	
	</delete>


	<!-- 휴가 승인 -->
	<update id="approval" parameterType="ApprovalRequest">
		UPDATE wt_approval_request
		SET
			request_state = #{reState},
			request_supervisor = #{reSupervisor},
			request_processing_date=NOW(),
			refuse_reason = #{refuseReason}
		WHERE 
			request_code = #{reCode};
		
	</update>
	
	
	<!-- 업데이트 예제 -->
	<update id="modifyMember" parameterType="Member">
		UPDATE tb_member
		<trim prefix="SET" suffixOverrides=",">

			<!-- neq는 !=랑 같은 말 -->
			<if test="memberPw != null and memberPw neq''.toString()">
				m_pw = #{memberPw},
			</if>
			<if test="memberName != null and memberName neq''.toString()">
				m_name = #{memberName},
			</if>
			<if test="memberLevel != null and memberLevel neq''.toString()">
				m_level = #{memberLevel},
			</if>
			<if test="memberEmail != null and memberEmail neq''.toString()">
				m_email = #{memberEmail},
			</if>
			<if test="memberAddr != null and memberAddr neq''.toString()">
				m_addr = #{memberAddr}
			</if>
		</trim>
		WHERE
		m_id = #{memberId};



	</update>

	
	<!-- 휴가리스트 중복 구하기 -->
	<select id="hListDuplicate" parameterType="String" resultType="int">
	
		select COUNT(*) 
		from wt_approval_request
		WHERE 
			((DATE_FORMAT(#{startDate},'%Y-%m-%d') <![CDATA[ <= ]]> request_start_date and request_start_date <![CDATA[ <= ]]> DATE_FORMAT(#{endDate},'%Y-%m-%d')) or (DATE_FORMAT(#{endDate},'%Y-%m-%d') <![CDATA[ <= ]]> request_end_date and DATE_FORMAT(#{endDate},'%Y-%m-%d') <![CDATA[ >= ]]> request_start_date) or (DATE_FORMAT(#{startDate},'%Y-%m-%d') <![CDATA[ >= ]]> request_start_date and DATE_FORMAT(#{endDate},'%Y-%m-%d') <![CDATA[ <= ]]> request_end_date))
			AND request_state = '승인';

	</select>
	
	
	
	<!-- db에서 입력받은 reStartDate(휴가시작날짜)가 현재 시간보다 같거나 작은지 검색한다 -->
	<select id="getStartDayCk" parameterType="String"
		resultType="int">
		
		SELECT #{reStartDate} <![CDATA[ <= ]]> NOW()
		
		
	</select>
	
	
	<!-- 코드 자동 생성 증가 -->
	<select id="getReCode" resultType="hashMap">
		SELECT IFNULL((SELECT max(CAST(substring(request_code,9) AS DECIMAL))+1 FROM wt_approval_request),1) AS max;
	
	
	</select>

	
	<!-- 휴가 insert -->
	<insert id="addholidayApproval" parameterType="ApprovalRequest">
	
		INSERT INTO wt_approval_request
		(request_code, request_sortation, mr_id, request_date, request_start_date, request_end_date, request_reason, sortation, request_supervisor, request_processing_date, request_state)
		VALUES (#{reCode},'holiday', #{mrId}, NOW(), #{reStartDate}, #{reEndDate},  #{reReason}, #{sortation},null, null, '신청')
		
	</insert>
	
	
	<!-- 멤버 아이디, 멤버 패스워드, 멤버이름을 검색후 멤버객체 반환 -->
	<select id="getMemberById" parameterType="String" resultType="Member">
		SELECT mr_id as mrId
				, mr_pw as mrPw
				, mr_name as mrName
		FROM wt_member_registration
		WHERE 
			mr_id = #{mrId};
	</select>


	<!-- 휴가신청리스트 검색 -->
	<select id="getHolidayList" resultType="ApprovalRequest">
		
		SELECT 	request_code as reCode
				, request_date as reDate
				, r.mr_name as mrId
				, left(request_start_date,10) as reStartDate
				, left(request_end_date,10) as reEndDate
				, request_reason as reReason
				, sortation as sortation
				, request_supervisor as reSupervisor 
				, request_processing_date as reProcessingDate
				, request_state as reState
				, refuse_reason as refuseReason
		FROM wt_approval_request AS a 
			LEFT JOIN wt_member_registration AS r
			ON a.mr_id = r.mr_id
		WHERE request_sortation = 'holiday';

	</select>

</mapper>
    